class Solution:
    def longestValidParentheses(self, s: str) -> int:
        longest = 0
        second_longest = 0
        stack = 0
        i = 0
        while i < len(s):
            # skip the trailing )
            while i < len(s) and s[i] == ')':
                i += 1
            # count the length of 'valid' substring from left to right
            start = i
            length = 0
            while i < len(s) and (stack or s[i] == '('):
                if s[i] == '(':
                    stack += 1
                else:
                    stack -= 1
                    length += 2
                i += 1
            if length >= longest:
                print(s[start:i])
                second_longest = longest
                longest = length
            i += 1
        # if stack is not empty the last part is problametic
        if stack and (length == longest):
            print('problametic')
            stack = 0
            longest = 0
            i = len(s) - 1
            while i >= start:
                # skip the trailing (
                while i >= start and s[i] == '(':
                    i -= 1
                # count the length of 'valid' substring from right to left
                length = 0
                while i >= start and (stack or s[i] == ')'):
                    if s[i] == ')':
                        stack += 1
                    else:
                        stack -= 1
                        length += 2
                    i -= 1
                if length >= longest:
                    longest = length
                i -= 1
            longest = max(longest, second_longest)
        return longest
            
